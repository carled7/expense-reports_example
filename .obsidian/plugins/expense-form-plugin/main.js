/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);

// form.ts
var personalFinanceReportExample = [
  {
    type: "date" /* DATE */,
    name: "Date",
    description: "Enter expense date",
    className: "date",
    content: { expression: '{{new Date().toISOString().split("T")[0]}}' }
  },
  {
    type: "time" /* TIME */,
    name: "Time",
    description: "Enter expense time",
    className: "time",
    content: {
      expression: "{{`${new Date().getHours()}:${new Date().getMinutes()}`}}"
    }
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Category",
    className: "category",
    description: "Select expense category",
    content: {},
    options: { expression: "{{%%expenses-dictionary.md%%.categories}}" }
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Sub-Category",
    className: "sub-category",
    description: "Select expense sub-category",
    content: {},
    options: {
      expression: "{{%%expenses-dictionary.md%%[$$.category]}}"
    }
  },
  {
    type: "number" /* NUMBER */,
    name: "Cost",
    className: "cost",
    description: "Enter how much it cost",
    placeholder: "0.00",
    content: {}
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Origin",
    description: "Select expense payment origin",
    className: "origin",
    content: {},
    options: { expression: "{{%%expenses-dictionary.md%%.origin}}" }
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Payment type",
    description: "Select expense payment type",
    className: "payment-type",
    content: {},
    options: {
      expression: '{{%%expenses-dictionary.md%%[`${$$.origin === "Voucher" ? "voucher" : "payment-type"}`]}}'
    }
  },
  {
    type: "text" /* TEXT */,
    name: "Bougth at",
    description: "Enter where it was spent",
    className: "bought-at",
    placeholder: "Seller`s name",
    content: {},
    options: { expression: "{{%%expenses-dictionary.md%%.city}}" }
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "City",
    description: "Select where it was spent",
    className: "city",
    content: {},
    options: { expression: "{{%%expenses-dictionary.md%%.city}}" }
  },
  {
    type: "text" /* TEXT */,
    name: "Description",
    description: "Enter expense description",
    placeholder: "Expense description",
    className: "description",
    content: {}
  },
  {
    type: "text" /* TEXT */,
    name: "Grouping Tag",
    description: "Add tag to semantic grouping",
    placeholder: "#semanticTag",
    className: "grouping-tag",
    content: {}
  }
];
var formFieldExamples = [
  {
    type: "text" /* TEXT */,
    name: "Field 01",
    description: "first field",
    className: "field01",
    content: { expression: "{{%%expenses/1716155614454.md%%.category}}" }
    // options: { a: "a", b: "b" },
  },
  {
    type: "text" /* TEXT */,
    name: "Field 02",
    description: "second field",
    className: "field02",
    content: {
      expression: "{{%%expenses/1716155633804.md%%.category + ' ' + $$.field01}}"
    }
  },
  {
    type: "text" /* TEXT */,
    name: "Field 03",
    description: "third field",
    className: "field03",
    content: { expression: "{{$$.field02}}" }
  },
  {
    type: "number" /* NUMBER */,
    name: "Field 00",
    description: "cost field",
    className: "costfield",
    content: {}
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Field 04",
    description: "forth field",
    className: "field04",
    content: { expression: "{{$$.field03}}" },
    options: { value: ["a", "b"] }
  },
  {
    type: "dropdown" /* DROPDOWN */,
    name: "Field 05",
    description: "fifth field",
    className: "field05",
    content: { expression: "{{$$.field02}}" },
    options: {
      expression: "{{Object.values(%%my props.md%%).map(i => i.toUpperCase())}}"
    }
  }
];

// form-field.factory.ts
var import_obsidian = require("obsidian");

// utils.ts
function getClassNamesFromExpression(expression) {
  const classNameMatcher = new RegExp(/\$\$\.([0-9a-zA-Z-\-]+)/, "g");
  let matches = void 0;
  const formFieldClassNames = [];
  while ((matches = classNameMatcher.exec(expression)) !== null)
    formFieldClassNames.push(matches[1]);
  return formFieldClassNames;
}
function getFilePathsFromExpression(expression) {
  const filePathMatcher = new RegExp(/%%([^%%]*)%%/, "g");
  let matches = void 0;
  const filePaths = [];
  while ((matches = filePathMatcher.exec(expression)) !== null)
    filePaths.push(matches[1]);
  return filePaths;
}
function fromArrayToRecord(array) {
  if (!array)
    return {};
  const record = {};
  array.map((item) => {
    record[item] = item;
  });
  return record;
}

// form-field.factory.ts
var FormFieldFactory = class {
  constructor(params) {
    this.contentEl = params.contentEl;
    this.app = params.app;
    this.formField = params.formField;
    this.expressionContext = params == null ? void 0 : params.expressionContext;
    this.formField.state = "created" /* CREATED */;
  }
  set dependents(dependents) {
    this.dependentFields = dependents;
  }
  async initialiseFormField(dependents) {
    this.formField.setting = this.getSetting();
    await this.assignDefaultValue();
    this.dependents = dependents;
    this.formField.state = "initialized" /* INITIALIZED */;
  }
  async assignDefaultValue() {
    await this.assignValue();
  }
  async updateField(value, updatedBy) {
    var _a;
    //new import_obsidian.Notice(`${this.formField.className} changed: ${value}`);
    await this.assignValue(value, updatedBy);
    await Promise.all(
      (_a = this.dependentFields) == null ? void 0 : _a.map(
        (dependent) => dependent.updateField(void 0, this.formField.className)
      )
    );
  }
  async assignValue(value, updatedBy) {
    var _a;
    const valueToAssing = value ? value : await this.evaluateExpression(
      (_a = this.formField.content) == null ? void 0 : _a.expression,
      this.expressionContext
    );
    if (valueToAssing === this.formField.content.value)
      return;
    this.value = valueToAssing;
  }
  assignFormFieldAttributes(setting) {
    var _a;
    const htmlEl = this.contentEl.querySelector(
      this.getFormFieldHtmlPath()
    );
    htmlEl == null ? void 0 : htmlEl.setAttribute("type", this.formField.type);
    if (this.formField.placeholder)
      htmlEl == null ? void 0 : htmlEl.setAttribute("placeholder", (_a = this.formField) == null ? void 0 : _a.placeholder);
    if (this.formField.description)
      setting.setDesc(this.formField.description);
  }
  getFormFieldHtmlPath(formField = this.formField) {
    return `div.${formField.className} > div.setting-item-control > input`;
  }
  async evaluateExpression(expression, expressionContext) {
    if (!this.formField.content.expression)
      return "";
    const [prefix, expressionToEvaluate, sufix] = expression ? this.splitExpression(expression) : ["", "", ""];
    if (!expressionToEvaluate)
      return prefix;
    const parsedExpression = await this.parseExpressionContext(
      expressionToEvaluate,
      expressionContext
    );
    try {
      const expressionResult = new Function(
        `return ${parsedExpression};`
      )();
      return `${prefix}${expressionResult}${sufix != null ? sufix : ""}`;
    } catch (error) {
      new import_obsidian.Notice(
        `Error on evaluating ${this.formField.className} expression`
      );
      console.error(error);
      return `${prefix}${sufix != null ? sufix : ""}`;
    }
  }
  splitExpression(expression) {
    var _a;
    if (!(expression.includes("{{") && expression.includes("}}")))
      return [expression];
    const expressionMatcher = new RegExp(/{{(.*)}}/);
    const expressionToEvaluate = (_a = expressionMatcher.exec(expression)) == null ? void 0 : _a.at(0);
    const prefix = expression.split("{{")[0];
    const sufix = expression.split("}}")[1];
    return [prefix, expressionToEvaluate != null ? expressionToEvaluate : "", sufix];
  }
  async parseExpressionContext(expression, expressionContext) {
    var _a, _b;
    const formFieldClassNames = getClassNamesFromExpression(expression);
    formFieldClassNames.forEach((formFieldClassName) => {
      var _a2, _b2, _c, _d, _e, _f;
      const formField = expressionContext == null ? void 0 : expressionContext.find(
        (formField2) => formField2.formField.className === formFieldClassName
      );
      const classNameMatcher = new RegExp(
        `\\$\\$\\.${formField == null ? void 0 : formField.formField.className}`
      );
      const isFilePath = new RegExp(
        `%%.*\\$\\$\\.${formField == null ? void 0 : formField.formField.className}.*%%`,
        "g"
      );
      const valueTeReplace = isFilePath.test(expression) ? `${(_c = (_b2 = (_a2 = formField == null ? void 0 : formField.formField) == null ? void 0 : _a2.content) == null ? void 0 : _b2.value) != null ? _c : ""}` : `'${(_f = (_e = (_d = formField == null ? void 0 : formField.formField) == null ? void 0 : _d.content) == null ? void 0 : _e.value) != null ? _f : ""}'`;
      expression = expression.replace(classNameMatcher, valueTeReplace);
    });
    const filePaths = getFilePathsFromExpression(expression);
    await Promise.all(
      filePaths.map(async (filePath) => {
        const filePathMatcher = new RegExp(`%%${filePath}%%`);
        const [_, fileExtension] = filePath.split(".");
        if (fileExtension !== "md") {
          new import_obsidian.Notice(
            `Can't handle .${fileExtension} extension, .md expected`
          );
          expression = expression.replace(filePathMatcher, "");
        }
        const file = this.app.vault.getFileByPath(filePath);
        if (!file)
          return;
        let fileFrontMatter = "";
        await this.app.fileManager.processFrontMatter(
          file,
          (frontmatter) => fileFrontMatter = frontmatter
        );
        expression = expression.replace(
          filePathMatcher,
          JSON.stringify(fileFrontMatter)
        );
      })
    );
    const expressionContentMatcher = new RegExp(/{{(.*)}}/);
    return (_b = (_a = expressionContentMatcher.exec(expression)) == null ? void 0 : _a.at(-1)) != null ? _b : "";
  }
};
var TextFormFieldFactory = class extends FormFieldFactory {
  constructor(params) {
    super(params);
  }
  getSetting() {
    const setting = new import_obsidian.Setting(this.contentEl).setName(this.formField.name).setClass(this.formField.className).addText((text) => text.onChange(this.updateField.bind(this)));
    this.assignFormFieldAttributes(setting);
    return setting;
  }
  set value(valueToSet) {
    const fieldEl = this.contentEl.querySelector(
      this.getFormFieldHtmlPath()
    );
    if (fieldEl instanceof HTMLInputElement) {
      fieldEl.value = valueToSet;
      this.formField.content["value"] = valueToSet;
    } else
      new import_obsidian.Notice(
        `Can't find field element: ${this.getFormFieldHtmlPath()}`
      );
  }
};
var TimeFormFieldFactory = class extends TextFormFieldFactory {
  async assignValue(value, updatedBy) {
    var _a;
    let valueToAssing = value ? value : await this.evaluateExpression(
      (_a = this.formField.content) == null ? void 0 : _a.expression,
      this.expressionContext
    );
    let [hour, minute] = valueToAssing.split(":");
    if (!hour || !minute) {
      new import_obsidian.Notice(`Unexpected format for time field. Expected is HH:mm`);
      return;
    }
    hour = hour.length === 2 ? hour : `0${hour}`;
    minute = minute.length === 2 ? minute : `0${minute}`;
    valueToAssing = `${hour}:${minute}`;
    if (valueToAssing === this.formField.content.value)
      return;
    this.value = valueToAssing;
  }
};
var DropdownFormFieldFactory = class extends FormFieldFactory {
  constructor(params) {
    super(params);
    this.optionExpressionContext = params.optionExpressionContext;
  }
  getSetting() {
    const options = fromArrayToRecord(this.formField.options.value);
    const setting = new import_obsidian.Setting(this.contentEl).setName(this.formField.name).setClass(this.formField.className).addDropdown(
      (dropdown) => dropdown.addOptions(options).onChange(this.updateField.bind(this))
    );
    this.assignFormFieldAttributes(setting);
    return setting;
  }
  set value(valueToSet) {
    const fieldEl = this.contentEl.querySelector(
      this.getFormFieldHtmlPath()
    );
    if (fieldEl instanceof HTMLSelectElement) {
      fieldEl.value = valueToSet;
      this.formField.content["value"] = valueToSet;
    } else
      new import_obsidian.Notice(
        `Can't find field element: ${this.getFormFieldHtmlPath()}`
      );
  }
  getFormFieldHtmlPath(formField = this.formField) {
    return `div.${formField.className} > div.setting-item-control > select`;
  }
  async resolveDropdownOptions(updatedBy = this.formField.className) {
    var _a;
    const expressionToEvaluate = (_a = this.formField.options) == null ? void 0 : _a.expression;
    if (!expressionToEvaluate || this.formField.state === "initialized" /* INITIALIZED */ && !expressionToEvaluate.includes(updatedBy))
      return;
    const parsedExpression = await this.parseExpressionContext(
      expressionToEvaluate,
      this.optionExpressionContext
    );
    try {
      const newOptions = new Function(
        `return ${parsedExpression};`
      )();
      this.addNewOptions.bind(this)(newOptions, updatedBy, false, true);
    } catch (error) {
      new import_obsidian.Notice(
        `error on evaluating ${this.formField.className} option expression`
      );
      console.error(error);
    }
  }
  async assignValue(value, updatedBy) {
    var _a, _b;
    await this.resolveDropdownOptions(updatedBy);
    const valueToAssing = value ? value : await this.evaluateExpression(
      this.formField.content.expression,
      this.expressionContext
    ) || Object.values((_b = (_a = this.formField.options) == null ? void 0 : _a.value) != null ? _b : {})[0];
    if (valueToAssing === this.formField.content.value || valueToAssing === "")
      return;
    if (this.formField.options.value && !Object.values(this.formField.options.value).includes(valueToAssing))
      this.addNewOptions([valueToAssing], updatedBy, !!updatedBy);
    this.value = valueToAssing;
  }
  addNewOptions(newOptions, updatedBy = this.formField.className, keepOnlyOneByUpdatedField = true, removeOldOptions = false) {
    if (!newOptions.length)
      return;
    const formFieldHtmlPath = this.getFormFieldHtmlPath();
    const fieldEl = this.contentEl.querySelector(
      this.getFormFieldHtmlPath()
    );
    if (!fieldEl)
      return;
    if (removeOldOptions) {
      fieldEl.innerHTML = "";
      this.formField.options.value = newOptions;
    }
    newOptions.forEach((newOption) => {
      var _a;
      const postAddedOption = keepOnlyOneByUpdatedField ? (_a = this.contentEl) == null ? void 0 : _a.querySelector(
        `${formFieldHtmlPath} > option.${updatedBy}`
      ) : void 0;
      if (postAddedOption && keepOnlyOneByUpdatedField)
        fieldEl.removeChild(postAddedOption);
      fieldEl.createEl("option", {
        value: newOption,
        text: newOption
      }).setAttr("class", updatedBy);
      this.formField.options.value = this.formField.options.value ? [...this.formField.options.value, newOption] : [newOption];
    });
  }
};
var Form = class {
  constructor(contentEl, app, formFields) {
    this.formFieldFactories = [];
    this.contentEl = contentEl;
    this.app = app;
    this.formFields = formFields;
  }
  async createFormFields() {
    this.formFields.forEach((formField) => {
      var _a;
      if (formField.setting)
        formField.setting.clear();
      const factoryParams = {
        formField,
        app: this.app,
        contentEl: this.contentEl,
        expressionContext: this.getExpressionContext(
          (_a = formField.content) == null ? void 0 : _a.expression
        )
      };
      switch (formField.type) {
        case "text" /* TEXT */:
        case "date" /* DATE */:
        case "number" /* NUMBER */:
          this.formFieldFactories.push(
            new TextFormFieldFactory(factoryParams)
          );
          break;
        case "time" /* TIME */:
          this.formFieldFactories.push(
            new TimeFormFieldFactory(factoryParams)
          );
          break;
        case "dropdown" /* DROPDOWN */:
          this.formFieldFactories.push(
            new DropdownFormFieldFactory({
              optionExpressionContext: this.getExpressionContext(
                formField.options.expression
              ),
              ...factoryParams
            })
          );
          break;
      }
    });
    for (const factory of this.formFieldFactories) {
      await factory.initialiseFormField(
        this.getDependentFields(
          factory.formField.className,
          this.formFieldFactories
        )
      );
    }
  }
  getDependentFields(fieldClassName, formFieldFactories) {
    return formFieldFactories.filter(
      (factory) => {
        var _a, _b, _c, _d;
        return ((_b = (_a = factory.formField.content) == null ? void 0 : _a.expression) == null ? void 0 : _b.includes(
          `$$.${fieldClassName}`
        )) || ((_d = (_c = factory.formField.options) == null ? void 0 : _c.expression) == null ? void 0 : _d.includes(`$$.${fieldClassName}`));
      }
    );
  }
  getExpressionContext(expression) {
    const expressionContext = [];
    if (!expression)
      return expressionContext;
    const formFieldClassNames = getClassNamesFromExpression(expression);
    formFieldClassNames.forEach((formFieldClassName) => {
      const partialContext = this.formFieldFactories.find(
        (formFieldFactory) => formFieldFactory.formField.className === formFieldClassName
      );
      if (partialContext)
        expressionContext.push(partialContext);
    });
    return expressionContext;
  }
  getDataAsFrontmatter() {
    let frontmatterString = "";
    this.formFieldFactories.map((factory) => {
      var _a, _b, _c;
      const stringValue = factory.formField.type === "dropdown" /* DROPDOWN */ || factory.formField.type === "text" /* TEXT */ ? `"${(_b = (_a = factory.formField.content) == null ? void 0 : _a.value) != null ? _b : ""}"` : (_c = factory.formField.content) == null ? void 0 : _c.value;
      frontmatterString += `${factory.formField.className}: ${stringValue}
`;
    });
    return `---
${frontmatterString}---`;
  }
  getTimestampNamingStrategy() {
    var _a, _b;
    const date = (_a = this.formFieldFactories.find(
      (factory) => factory.formField.className === "date"
    )) == null ? void 0 : _a.formField.content.value;
    const time = (_b = this.formFieldFactories.find(
      (factory) => factory.formField.className === "time"
    )) == null ? void 0 : _b.formField.content.value;
    const expenseTime = new Date(`${date} ${time}`).getTime();
    const currentMilliseconds = new Date().getMilliseconds();
    return expenseTime + currentMilliseconds;
  }
  setFormDataNull() {
    this.formFieldFactories.forEach(
      (factory) => factory.formField.content.value = void 0
    );
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.saveSettings();
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon(
      "wallet",
      "Report expense",
      (evt) => {
        new SampleModal(this.app, personalFinanceReportExample).open();
      }
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(formFieldExamples);
  }
};
var SampleModal = class extends import_obsidian2.Modal {
  constructor(app, formFields) {
    super(app);
    this.app = app;
    this.form = new Form(this.contentEl, this.app, formFields);
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Report expense" });
    await this.form.createFormFields();
    new import_obsidian2.Setting(this.contentEl).addButton(
      (button) => button.setButtonText("Save expense").setCta().onClick(() => {
        const frontmatterProps = this.form.getDataAsFrontmatter();
        const formInputTimestamp = this.form.getTimestampNamingStrategy();
        this.close();
        this.app.vault.create(
          `expenses/${formInputTimestamp}.md`,
          frontmatterProps
        );
      })
    );
  }
  onClose() {
    this.form.setFormDataNull();
  }
};
//# sourceMappingURL=data:application/json;base64,
